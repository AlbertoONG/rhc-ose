#!/bin/bash

error_out() {
  echo "ERROR: ${1}"
  echo "ERROR: See ${LOGFILE} for more details."
  exit 1
}

do_sync() {
  local image_url="${registry_url}/${image}"
  local push_url="${local_registry_url}/${image}"

  echo "(1/3) Pulling Image ${image_url}..." | tee -a ${LOGFILE}
  docker pull ${image_url} &>>${LOGFILE} || error_out "Failed to PULL image: docker pull ${image_url}"
  image_awk="${registry_url}/$(echo ${image} | sed -r 's/:([^:]*)$/.*\1/')"
  image_awk=${image_awk//\//\\/}
  image_id=`docker images | awk "/${image_awk}/"' {print $3}'`

  echo "(2/3) Tagging Image ${image_id}|${image}..." | tee -a ${LOGFILE}
  docker tag -f "${image_id}" "${push_url}" &>>${LOGFILE} || error_out "Failed to tag image: docker tag -f ${image_id} ${push_url}"

  echo "(3/3) Pushing Tag ${push_url}..." | tee -a ${LOGFILE}
  docker push ${push_url} &>>${LOGFILE} || error_out "Failed to push image: docker push ${push_url}"
  echo "Completed Push of image: ${image}"
}

usage() {
  echo "$0:

Description: Syncs images from a public docker registry to a private registry. Use this to populate private registries in a closed off environment.
Must be run from a linux host capable of running docker commands which has access both to the internet and the private registry.

Usage: $0 --from=<public-registry-hostname> --to=<registry-to-sync-to> --file=<image-file>

Options:
  --from=<public-registry-hostname> : Name of the public registry you wish to PULL images from (i.e. docker.io, registry.access.redhat.com)
  --to=<local-registry>          : Location of private registry you wish to PUSH images to (i.e. localhost:5000, registry.mydomain.com)
  --file=<image-file>               : Text file containing a list of image names (one image name per line)
  --tag=<tag name>                  : Tag to pull/push
  --parallel                        : Run multiple syncs in parallel, for faster runs on beefy servers
"
}

LOGFILE=~/docker_image_sync.log
touch ${LOGFILE}
parallel=false

for i in "$@"
do
  case $i in
    --from=*)
      registry_url="${i#*=}"
      shift;;
    --file=*)
      file_path="${i#*=}"
      shift;;
    --to=*)
      local_registry_url="${i#*=}"
      shift;;
    --tag=*)
      tag="${i#*=}"
      shift;;
    --parallel)
      parallel=true;
      shift;;
    --help|-h)
      usage;
      shift;;
    *)
      echo "Invalid Option: ${i%=*}"
      exit 1;
      ;;
  esac
done

for arg in "from:$registry_url" "file:$file_path" "to:$local_registry_url"; do
  if [ -z ${arg#*:} ]; then
    echo "Missing argument --${arg%:*}."
    usage
    exit 1;
  fi
done

images=`cat ${file_path}`

for image in $images; do
  if $parallel; then
    (
      do_sync
    ) &
    bg_pids="$bg_pids $!"
  else
    do_sync
  fi
done

count=1
while [ $count -ne 0 ] ; do
  count=0
  for pid in $bg_pids; do
    if [ -n "$(ps -p $pid --no-header)" ]; then
      ((count++))
    fi
  done
  sleep 1
done

echo "Completed all images"
