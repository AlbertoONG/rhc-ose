#!/bin/bash

#
#   Copyright 2015 Red Hat Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

#
# osc-provision - Full script-based provisioning of an OpenShift Enterprise 3 envioronment
#
# Usage: See usage function below
#
SCRIPT_BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
REPO_BASE_NAME=$( basename $( dirname ${SCRIPT_BASE_DIR} ) )

## Functions

source ${SCRIPT_BASE_DIR}/lib/helpers
source ${SCRIPT_BASE_DIR}/lib/constants

# Show script usage
usage() {
  echo "
  Usage: $0 [options]

  Options:
  --num-nodes=<integer>         : Number of Nodes to provision
  --config-file=<path>          : Path to a config file for defining the environment
  --no-install                  : Provision instances and sync keys, but do not run the OpenShift installer
  --key=<key name>              : SSH Key used to authenticate to Cloud API
  --delete=<Environment ID>     : Delete specified environment
  --debug                       : Will add -x to all bash commands
  "
}

do_provision() {
  if [ -z $num_of_nodes ]; then
    echo "Missing argument: --num-nodes <integer>"
    usage
    exit 1;
  fi

  # Provision instances
  echo "Provisioning master. This could take several minutes."
  master_ip=$(provision_masters) || error_out "Provisioning Failed." $ERROR_CODE_PROVISION_FAILURE
  echo "Complete!"
  echo "Provisioning $num_of_nodes nodes. This could take several minutes."
  node_ips=$(provision_nodes) || error_out "Provisioning Failed." $ERROR_CODE_PROVISION_FAILURE
  echo "Complete!"

  master_public=$(get_public_ips "${master_ip}")
  node_publics=$(get_public_ips "${node_ips//$'\n'/,}")

  # Sync SSH keys
  ${SCRIPT_BASE_DIR}/osc-sync-keys -m="${master_public}" -n="${master_public},${node_publics}"
  [ $? -eq 0 ] || error_out "Key Sync Failed."

  if $master_is_node; then
    node_publics="${master_public},${node_publics}"
    node_ips="${master_ip}"$'\n'"${node_ips}"
  fi

  # TODO:
  #  - Pull together all scripts to provision a complete environment
  if $no_install; then
    echo "Skipping Installation Step. You'll need to do this manually."
  else
    install_openshift
  fi

  dns_server=${node_publics##*,}

  echo "
Master:
  - Hostname: $( get_hostnames $master_public $OPENSHIFT_BASE_DOMAIN $dns_server)
  - IPs: ${master_ip}"
  echo "Nodes: "
  for node in ${node_ips//$'\n'/ }; do
    echo "- Node"
    echo "-- Hostname: $(get_hostnames $(get_public_ips ${node}) $OPENSHIFT_BASE_DOMAIN $dns_server)"
    echo "-- IPs: ${node}"
  done
  echo "DNS Server: $(get_hostnames $dns_server $OPENSHIFT_BASE_DOMAIN $dns_server)"
  echo "Environment ID: $ENV_ID"
}

do_delete() {
  command="${SCRIPT_BASE_DIR}/${platform}/provision.sh
  --action delete_by_name
  --instance-name ${ENV_ID}
  --n"
  $command || error_out "Delete failed. See log at ${LOGFILE}." ${ERROR_CODE_PROVISION_FAILURE}
}

install_openshift() {
  # Clean out previous install attempts
  ${SSH_CMD} root@${master_public} "rm -rf ~/${REPO_BASE_NAME}"
  # Script is executed from ${REPO_BASE_NAME}/provisioning, so we need to strip two directories
  pushd $(dirname $(dirname ${SCRIPT_BASE_DIR})) >/dev/null
    # Pull Repo into master so we can continue installation
    tar cf - ${REPO_BASE_NAME} | ${SSH_CMD} root@${master_public} tar xf -
  popd >/dev/null

  ${SSH_CMD} root@${master_public} "$CONF_ENVIRONMENT bash${bash_opts} ~/${REPO_BASE_NAME}/provisioning/osc-install -m='${master_ip}' -n='${node_ips//$'\n'/,}' -a='prep,dns,install,post'"

}

random_string() {
  cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-16} | head -n 1
}

provision_masters() {
  instance_name="master-${ENV_ID}"
  command="${SCRIPT_BASE_DIR}/${platform}/provision.sh \
  --instance-name ${instance_name} \
  --key ${key} \
  --image-name ${IMAGE_NAME} \
  --security-groups ${SECURITY_GROUP_MASTER} \
  --add-volume 25 \
  --n \
  --debug"
  $command || error_out "Master Provision failed. See log at ${LOGFILE}." ${ERROR_CODE_PROVISION_FAILURE}
}

provision_nodes() {
  instance_name="node-${ENV_ID}"
  command="${SCRIPT_BASE_DIR}/${platform}/provision.sh \
  --instance-name ${instance_name} \
  --key ${key} \
  --image-name ${IMAGE_NAME} \
  --security-groups ${SECURITY_GROUP_NODE} \
  --num-instances $num_of_nodes \
  --add-volume 25 \
  --n \
  --debug"
  $command || error_out "Node Provision failed. See log at ${LOGFILE}." ${ERROR_CODE_PROVISION_FAILURE}
}

source ${SCRIPT_BASE_DIR}/lib/error_codes

# Process input
for i in "$@"
do
  case $i in
    --num-nodes=*)
      num_of_nodes="${i#*=}"
      shift;;
    --config=*)
      process_configfile "${i#*=}"
      shift;;
    --no-install)
      no_install=true;
      shift;;
    --key=*)
      key="${i#*=}"
      shift;;
    --delete=*)
      action="delete"
      CONF_ENV_ID="${i#*=}"
      shift;;
    --debug)
      set -x;
      bash_opts=" -x"
      shift;;
    *)
      echo "Invalid Option: ${i%=*}"
      exit 1;
      ;;
  esac
done

# Set up environment based on default values and User input

ENV_ID=${CONF_ENV_ID:-"$(random_string 8)"}
IMAGE_NAME=${CONF_IMAGE_NAME:-$image_name}
SECURITY_GROUP_MASTER=${CONF_SECURITY_GROUP_MASTER:-$security_group_master}
SECURITY_GROUP_NODE=${CONF_SECURITY_GROUP_NODE:-$security_group_node}
LOGFILE=${CONF_LOGFILE:-$logfile}
OPENSHIFT_BASE_DOMAIN=${CONF_OPENSHIFT_BASE_DOMAIN:-$openshift_base_domain}
OPENSHIFT_CLOUDAPPS_SUBDOMAIN=${CONF_OPENSHIFT_CLOUDAPPS_SUBDOMAIN:-$cloudapp_subdomain}

case $action in
  "provision")
    do_provision;
    ;;
  "delete")
    do_delete;
    ;;
  *)
    echo "Invalid action: $action"
    exit 1;
    ;;
esac
